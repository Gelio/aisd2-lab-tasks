
Korzystając z biblioteki Graph napisać następujące funkcje:

1) Funkcja LineGraph zwracająca graf krawędziowy podanego grafu.

2) Funkcja TopologicalSort_V0 zwracająca tablice z nową numeracją wierzchołków
spełniającą warunki sortowania topologicznego.
Parametr może być grafem posiadajacym cykl - taką sytuację trzeba wykryć i zwrócić null.

3) Funkcja TopologicalSort_DFS zwracająca tablice z nową numeracją wierzchołków
spełniającą warunki sortowania topologicznego.
Parametr z założenia jest grafem acyklicznym (nie trzeba tego badać).

Punktacja
- Line Graph           -   2 pkt (w tym 0.5 pkt opisy wierzchołków)
- TopologicalSort_V0   -   1 pkt
- TopologicalSort_DFS  -   1 pkt
- część domowa         -   1 pkt

UWAGA:
Sortowanie topologiczne grafu (skierowanego) polega na uporządkowaniu wierzchołków grafu w taki sposób,
aby każdy wierzchołek miał mniejszy numer niż wszyscy jego sąsiedzi.
Możemy to zrobic tylko wtedy, gdy graf nie posiada cykli.

WSKAZÓWKA do punktu 2):
a) Każdy graf acykliczny skierowany posiada przynajmniej jeden wierzchołek o stopniu wejściowym równym zero.
b) Jeśli z grafu acyklicznego usuniemy jeden wierzchołek (wraz w incydentnymi krawędziami) to pozostała
część grafu nadal jest grafem acyklicznym 

WSKAZÓWKA do punktu 3):
a) W DFS dla danego wierzchołka wykonywana jest seria wywołań rekurencyjnych dla jego jeszcze nieodwiedzonych sąsiadów.
Po powrocie z tych wywołań wszyscy sąsiedzi są już odwiedzeni.
b) Metoda DFSearchAll ma (między innymi) parametry preVisit i postVisit.
