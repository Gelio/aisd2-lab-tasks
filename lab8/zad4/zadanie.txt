
Dzisiejsze zadanie polega na zaimplementowaniu algorytmu przybliżonego dla rozwiązania
wariantu gry "Hey, That's My Fish!".

Gra jest jednoosobowa i polega na zebraniu jak największej liczby ryb z siatki złożonej 
z sześciokątów (jeden sześciokąt to jedna kra). Siatka jest ułożona jak w pliku hex_grid.jpg

Zasady gry:
- na pojedynczej krze może być od 1 do 3 ryb (nasze rybki nie lubią zimnej wody i chcą się poopalać na krach)
- gracz posiada skończoną liczbę pingwinów (lub wcale)
- pingwiny współdziałają, tzn. zbierają ryby do jednej puli
- pole, na którym jest 0 ryb, nie może być zajęta (jest to tzw. "dziura")
- pingwin opuszczając krę zabiera z niej ryby, które wliczają się do puli
  (gdy opuszcza krę tworzy się "dziura" - kra jest zatapiana).
- pingwin może się poruszać w wybranym kierunku do samego końca (do brzegu siatki lub do kry
  położonej bezpośrednio przed "dziurą" lub innym pingwinem)
- pingwin może się poruszać w jednym z 6 kierunków
  . ograniczeniem zakresu ruchu jest brzeg siatki, dziura lub inny pingwin
  . pingwin nie może skręcać w trakcie wykonywania ruchu
- pingwiny zbierają ryby aż do momentu, gdy wszystkie nie mogą się już ruszyć (koniec działania algorytmu)

Algorytmy:

1. (GreedyAlgorithm1)
   Spośród wszystkich możliwych ruchów wybieramy, ten w którym zbierzemy najwięcej ryb
   (gdy opuścimy krę na którą właśnie wchodzimy).
   Jeśli wegług tego kryterium jest kilka ruchów równie dobrych jako kolejne kryteria przyjmujemy
   - numer pingwina (mniejszy lepszy)
   - numer kierunku (mniejszy lepszy)
   - długość ruchu (mniejsza lepsza)

2. (GreedyAlgorithm2)
   Spośród wszystkich możliwych "najdłuższych" ruchów wybieramy, ten w którym zbierzemy najwięcej ryb
   (gdy opuścimy krę na którą właśnie wchodzimy).
   Jeśli wegług tego kryterium jest kilka ruchów równie dobrych jako kolejne kryteria przyjmujemy
   - numer pingwina (mniejszy lepszy)
   - numer kierunku (mniejszy lepszy)

"Najdłuższe" ruchy w danym kierunku to takie w których dochodzimy do bariery (brzeg planszy, dziura, inny pingwin)
i dalej ruszyć się nie możemy.

Punktacja:
3p - jeden algorytm (dowolny)
4p - oba algorytmy

Wskazówka:
- badanie licznych kryteriów wyboru najlepszego ruchu zaimplementować sprytnie
  (tak naprawdę badać tylko jedno najważniejsze kryterium)

Uwagi:
- algorytmy różnią się jedynie tym, że w pierwszym rozważamy wszystkie ruchy, a w drugim "najdłuższe"
- do wyświetlania w konsoli planszy przyda się ustawienie w pliku Program.cs zmiennej showBoard na true
- do wyświetlania w konsoli ruchów pingwinów przyda się ustawienie w pliku Program.cs zmiennej showMoves na true
- na początkowej planszy mogą znajdować się "dziury"

Metody do wykorzystania:
* Point GetNeighbour() w klasie Board
* bool IsPenguinAtField() w klasie Board
* int MovePenguin() w klasie Board
* bool IsValid() w strukturze Point
