Szlaki turystyczne na zboczu góry

W odległej i egzotycznej krainie znajduje się góra, na której zboczu zbudowano kilka miast.
Wszystko było pięknie (kwitnące drzewa roztaczały słodką woń, a stada koczkodanów biegały po targowiskach) do czasu,
gdy unijna komisja ds. rozwoju regionu nie zadecydowała o dofinansowaniu turystyki w naszej krainie.
Powstał pomysł wybudowania szlaków turystycznych, z których każdy miałby zawierać się w jednym mieście
bądź przechodzić przez kilka miast i kończyć hotelem. Ponadto, chcemy żeby każde miasto miało dostęp
do dokładnie jednego szlaku (bo co za dużo, to niezdrowo) oraz żeby kazdy ze szlaków szedł z góry na dół.
Oczywiście są różne koncepcje, jak należy optymalnie zaplanować te szlaki.

A) Koncepcja "najmniejsza liczba szlaków"
W tej wersji interesuje nas znalezienie rozwiązania, w którym całkowita liczba szlaków jest najmniejsza
(bo każdy dodatkowy szlak przekłada się na utrudnienia dla kadry zarządczej).
Ponadto, jeżeli optymalnych rozwiązań jest więcej niż jedno, chcemy wybrać to o najmniejszej możliwej
sumie długości szlaków (rzecz jasna sumujemy długości odcinków pomiędzy miastami).

B) Koncepcja "najniższy koszt szlaków"
W tej wersji koszem rozwiązania jest suma kosztów składających się na nie szlaków.
Każdy szlak kosztuje nas proporcjonalnie do długości odcinków między odwiedzanymi miastami,
plus koszt postawienia hotelu w ostatnim mieście. Szukamy rozwiązania o najniższym koszcie.

Formalniej:
Mapa krainy jest dana jako skierowany, ważony graf acykliczny (gdzie krawędzie łączą miasta,
między którymi można wybudować fragment szlaku, a wagi informują o koszcie takiego połączenia).
Ponadto, w punkcie B, dostajemy też tablicę kosztów hoteli.

A) metoda int minimumNumberOfTrails(IGraph g, out int totalCost, out IGraph trails)
zwraca minimalną liczbę szlaków, a przez parametry wyjściowe - koszt znalezionego rozwiązania i graf,
składający się z krawędzi grafu g wziętych do tego rozwiązania.

B) metoda int minimumCostOfTrails(IGraph g, int[] vcosts, out IGraph trails)
zwraca minimalny koszt rozwiązania. Parametr wyjściowy jak wyżej.

Punktacja:
1p prawidłowy wynik w A)
1p prawidłowy koszt w A)
1p prawidłowy graf w A)
1p podpunkt B), wszystko
1p część domowa

Przykład:
(wyobrażamy sobie, że wszystkie krawędzie skierowane są w prawo)

      4
     / \       8
    /   \
   1-----5---7
  / \   /
 /   \ /
0-----3----6
     /
    /
   2

Proste krawędzie kosztują 10, ukośne 25, a każde z miast 30.

A) Mamy trzy szlaki: 0->1->4->5->7, 2->3->6, 8
   koszt = 120

B) Mamy szlaki: 1->5->7, 0->3->6, 2, 4, 8
   koszt = 190
   
Nie ma innych równie dobrych rozwiazań.

Wskazówka:

A)
Wystarczy zbudować graf dwudzielny, w którym każdemu wierzchołkowi v grafu g odpowiadają jego dwie kopie
- wierzchołek v_out oraz v_in - a każda krawędź uv przechodzi na krawędź u_out v_in.
Korzystając z minCostMaxFlow wyznaczamy najtańsze najliczniejsze skojarzenie w zbudowanym grafie
i odtwarzamy z niego rozwiązanie.

B)
Tu działa podobny pomysł, musimy tylko uwzględnić koszty postawienia hoteli oraz w jakiś sposób zapewnić,
żeby do każdego miasta wchodził tylko jeden szlak.
